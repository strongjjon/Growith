
AVRASM ver. 2.1.30  G:\ROBOT_MAKE_7\25_[pi-128]_컬러트레킹(tracking)건_공주\2_프로그램\List\atmega128.asm Mon May 27 22:11:09 2024

G:\ROBOT_MAKE_7\25_[pi-128]_컬러트레킹(tracking)건_공주\2_프로그램\List\atmega128.asm(1097): warning: Register r4 already defined by the .DEF directive
G:\ROBOT_MAKE_7\25_[pi-128]_컬러트레킹(tracking)건_공주\2_프로그램\List\atmega128.asm(1098): warning: Register r5 already defined by the .DEF directive
G:\ROBOT_MAKE_7\25_[pi-128]_컬러트레킹(tracking)건_공주\2_프로그램\List\atmega128.asm(1099): warning: Register r6 already defined by the .DEF directive
G:\ROBOT_MAKE_7\25_[pi-128]_컬러트레킹(tracking)건_공주\2_프로그램\List\atmega128.asm(1100): warning: Register r7 already defined by the .DEF directive
G:\ROBOT_MAKE_7\25_[pi-128]_컬러트레킹(tracking)건_공주\2_프로그램\List\atmega128.asm(1101): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32a Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Yaw_angle=R4
                 	.DEF _Yaw_angle_msb=R5
                 	.DEF _Pitch_angle=R6
                 	.DEF _Pitch_angle_msb=R7
                 	.DEF _PcData=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0056 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00a0 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0055
000050 005f      	.DB  0x55,0x0,0x5F,0x0
000051 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000052 0006      	.DW  0x06
000053 0004      	.DW  0x04
000054 009e      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000055 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000056 94f8      	CLI
000057 27ee      	CLR  R30
000058 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000059 e0f1      	LDI  R31,1
00005a bff5      	OUT  MCUCR,R31
00005b bfe5      	OUT  MCUCR,R30
00005c 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00005e e1f8      	LDI  R31,0x18
00005f bdf1      	OUT  WDTCR,R31
000060 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000061 e08d      	LDI  R24,(14-2)+1
000062 e0a2      	LDI  R26,2
000063 27bb      	CLR  R27
                 __CLEAR_REG:
000064 93ed      	ST   X+,R30
000065 958a      	DEC  R24
000066 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000067 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000068 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000069 e0a0      	LDI  R26,LOW(__SRAM_START)
00006a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000080 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000081 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000082 bfed      	OUT  SPL,R30
000083 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000084 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000085 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000086 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000087 940c 00ab 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;#define       Laser         PORTB.0
                 ;
                 ;unsigned int Yaw_angle=85;      //영상기준 -는 좌
                 ;unsigned int Pitch_angle=95;    //영상기준 -는 업
                 ;
                 ;//=====통신중 수신받은 코드 값 저장
                 ;unsigned char PcData=0;
                 ;
                 ;//=====서보모터 좌우
                 ;void Servo_Yaw(int angle_Yaw){ // angle : -90도 ~ +90도
                 ; 0000 000E void Servo_Yaw(int angle_Yaw){
                 
                 	.CSEG
                 _Servo_Yaw:
                 ; .FSTART _Servo_Yaw
                 ; 0000 000F int PB5;
                 ; 0000 0010 angle_Yaw=angle_Yaw-90;
000089 d06d      	RCALL SUBOPT_0x0
                 ;	angle_Yaw -> Y+2
                 ;	PB5 -> R16,R17
                 ; 0000 0011 if(angle_Yaw<-85)angle_Yaw=-88;
00008a f40c      	BRGE _0x3
00008b d07b      	RCALL SUBOPT_0x1
                 ; 0000 0012 if(angle_Yaw> 85)angle_Yaw= 88;
                 _0x3:
00008c d07f      	RCALL SUBOPT_0x2
00008d f00c      	BRLT _0x4
00008e d083      	RCALL SUBOPT_0x3
                 ; 0000 0013  PB5=(angle_Yaw+ 90)*20 +1500;
                 _0x4:
00008f d087      	RCALL SUBOPT_0x4
                 ; 0000 0014  OCR1A=PB5; //PB5
                +
000090 bd1b     +OUT 42 + 1 , R17
000091 bd0a     +OUT 42 , R16
                 	__OUTWR 16,17,42
                 ; 0000 0015 }
000092 c009      	RJMP _0x2060001
                 ; .FEND
                 ;//=====서보모터 상하
                 ;void Servo_Pitch(int angle_Pitch){ // angle : -90도 ~ +90도
                 ; 0000 0017 void Servo_Pitch(int angle_Pitch){
                 _Servo_Pitch:
                 ; .FSTART _Servo_Pitch
                 ; 0000 0018 int PB6;
                 ; 0000 0019 angle_Pitch=angle_Pitch-90;
000093 d063      	RCALL SUBOPT_0x0
                 ;	angle_Pitch -> Y+2
                 ;	PB6 -> R16,R17
                 ; 0000 001A if(angle_Pitch<-85)angle_Pitch=-88;
000094 f40c      	BRGE _0x5
000095 d071      	RCALL SUBOPT_0x1
                 ; 0000 001B if(angle_Pitch> 85)angle_Pitch= 88;
                 _0x5:
000096 d075      	RCALL SUBOPT_0x2
000097 f00c      	BRLT _0x6
000098 d079      	RCALL SUBOPT_0x3
                 ; 0000 001C  PB6=(angle_Pitch+ 90)*20 +1500;
                 _0x6:
000099 d07d      	RCALL SUBOPT_0x4
                 ; 0000 001D  OCR1B=PB6; //PB6
                +
00009a bd19     +OUT 40 + 1 , R17
00009b bd08     +OUT 40 , R16
                 	__OUTWR 16,17,40
                 ; 0000 001E }
                 _0x2060001:
00009c 8119      	LDD  R17,Y+1
00009d 8108      	LDD  R16,Y+0
00009e 9624      	ADIW R28,4
00009f 9508      	RET
                 ; .FEND
                 ;
                 ;//=============USART0
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0022 {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
                 ; 0000 0023     PcData=UDR0;
0000a0 b09c      	IN   R9,12
                 ; 0000 0024 }
0000a1 9518      	RETI
                 ; .FEND
                 ;//==============
                 ;void Set_INI(void)
                 ; 0000 0027 {
                 _Set_INI:
                 ; .FSTART _Set_INI
                 ; 0000 0028 Servo_Yaw(Yaw_angle);
0000a2 01d2      	MOVW R26,R4
0000a3 dfe5      	RCALL _Servo_Yaw
                 ; 0000 0029 Servo_Pitch(Pitch_angle);
0000a4 01d3      	MOVW R26,R6
0000a5 dfed      	RCALL _Servo_Pitch
                 ; 0000 002A Laser = 0;
0000a6 98c0      	CBI  0x18,0
                 ; 0000 002B 
                 ; 0000 002C delay_ms(1000);
0000a7 eea8      	LDI  R26,LOW(1000)
0000a8 e0b3      	LDI  R27,HIGH(1000)
0000a9 d0a1      	RCALL _delay_ms
                 ; 0000 002D }
0000aa 9508      	RET
                 ; .FEND
                 ;
                 ;//==============
                 ;// Main Routinue
                 ;void main(void){
                 ; 0000 0031 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0032 
                 ; 0000 0033 DDRB=0xff;
0000ab efef      	LDI  R30,LOW(255)
0000ac bbe7      	OUT  0x17,R30
                 ; 0000 0034 DDRE=0xfe; // PE3 out
0000ad efee      	LDI  R30,LOW(254)
0000ae b9e2      	OUT  0x2,R30
                 ; 0000 0035 
                 ; 0000 0036 //서보모터
                 ; 0000 0037 TCCR1A=0xAA; // FAST PWM
0000af eaea      	LDI  R30,LOW(170)
0000b0 bdef      	OUT  0x2F,R30
                 ; 0000 0038 TCCR1B=0x1A; // 8분주=0.5usec
0000b1 e1ea      	LDI  R30,LOW(26)
0000b2 bdee      	OUT  0x2E,R30
                 ; 0000 0039 OCR1A=3000; // 1500usec=0도
0000b3 ebe8      	LDI  R30,LOW(3000)
0000b4 e0fb      	LDI  R31,HIGH(3000)
0000b5 bdfb      	OUT  0x2A+1,R31
0000b6 bdea      	OUT  0x2A,R30
                 ; 0000 003A OCR1B=3000; // 1500usec=0도
0000b7 bdf9      	OUT  0x28+1,R31
0000b8 bde8      	OUT  0x28,R30
                 ; 0000 003B ICR1=47999; // 0.5usec*48000=24000usec=41.67Hz
0000b9 e7ef      	LDI  R30,LOW(47999)
0000ba ebfb      	LDI  R31,HIGH(47999)
0000bb bdf7      	OUT  0x26+1,R31
0000bc bde6      	OUT  0x26,R30
                 ; 0000 003C 
                 ; 0000 003D // UART0 initialization
                 ; 0000 003E // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 003F // USART0 Receiver: On
                 ; 0000 0040 // USART0 Transmitter: On
                 ; 0000 0041 // USART0 Mode: Asynchronous
                 ; 0000 0042 // USART0 Baud Rate: 9600
                 ; 0000 0043 DDRE=0b11111110; // RXD0=PORTE.0=입력으로설정, TXD0=PORTE.1=출력으로설정
0000bd efee      	LDI  R30,LOW(254)
0000be b9e2      	OUT  0x2,R30
                 ; 0000 0044 UCSR0A=0x00;
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 b9eb      	OUT  0xB,R30
                 ; 0000 0045 UCSR0B=0x98;
0000c1 e9e8      	LDI  R30,LOW(152)
0000c2 b9ea      	OUT  0xA,R30
                 ; 0000 0046 UCSR0C=0x06;
0000c3 e0e6      	LDI  R30,LOW(6)
0000c4 93e0 0095 	STS  149,R30
                 ; 0000 0047 UBRR0H=0x00;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 0090 	STS  144,R30
                 ; 0000 0048 UBRR0L=0x67; //9600
0000c9 e6e7      	LDI  R30,LOW(103)
0000ca b9e9      	OUT  0x9,R30
                 ; 0000 0049 
                 ; 0000 004A Set_INI();
0000cb dfd6      	RCALL _Set_INI
                 ; 0000 004B // Global 인터럽트 인에이블
                 ; 0000 004C #asm("sei")
0000cc 9478      	SEI
                 ; 0000 004D //========
                 ; 0000 004E // 본문 시작
                 ; 0000 004F //========
                 ; 0000 0050     while(1){
                 _0x9:
                 ; 0000 0051 
                 ; 0000 0052         if(PcData=='L'){
0000cd e4ec      	LDI  R30,LOW(76)
0000ce 15e9      	CP   R30,R9
0000cf f421      	BRNE _0xC
                 ; 0000 0053          Laser=0;
0000d0 98c0      	CBI  0x18,0
                 ; 0000 0054          Yaw_angle=Yaw_angle-1;
0000d1 01f2      	MOVW R30,R4
0000d2 9731      	SBIW R30,1
0000d3 d04e      	RCALL SUBOPT_0x5
                 ; 0000 0055          Servo_Yaw(Yaw_angle);
                 ; 0000 0056          PcData=0;
                 ; 0000 0057         }
                 ; 0000 0058 
                 ; 0000 0059         if(PcData=='R'){
                 _0xC:
0000d4 e5e2      	LDI  R30,LOW(82)
0000d5 15e9      	CP   R30,R9
0000d6 f421      	BRNE _0xF
                 ; 0000 005A          Laser=0;
0000d7 98c0      	CBI  0x18,0
                 ; 0000 005B          Yaw_angle=Yaw_angle+1;
0000d8 01f2      	MOVW R30,R4
0000d9 9631      	ADIW R30,1
0000da d047      	RCALL SUBOPT_0x5
                 ; 0000 005C          Servo_Yaw(Yaw_angle);
                 ; 0000 005D          PcData=0;
                 ; 0000 005E         }
                 ; 0000 005F 
                 ; 0000 0060         if(PcData=='U'){
                 _0xF:
0000db e5e5      	LDI  R30,LOW(85)
0000dc 15e9      	CP   R30,R9
0000dd f421      	BRNE _0x12
                 ; 0000 0061          Laser=0;
0000de 98c0      	CBI  0x18,0
                 ; 0000 0062          Pitch_angle=Pitch_angle-1;
0000df 01f3      	MOVW R30,R6
0000e0 9731      	SBIW R30,1
0000e1 d045      	RCALL SUBOPT_0x6
                 ; 0000 0063          Servo_Pitch(Pitch_angle);
                 ; 0000 0064          PcData=0;
                 ; 0000 0065         }
                 ; 0000 0066 
                 ; 0000 0067         if(PcData=='D'){
                 _0x12:
0000e2 e4e4      	LDI  R30,LOW(68)
0000e3 15e9      	CP   R30,R9
0000e4 f421      	BRNE _0x15
                 ; 0000 0068          Laser=0;
0000e5 98c0      	CBI  0x18,0
                 ; 0000 0069          Pitch_angle=Pitch_angle+1;
0000e6 01f3      	MOVW R30,R6
0000e7 9631      	ADIW R30,1
0000e8 d03e      	RCALL SUBOPT_0x6
                 ; 0000 006A          Servo_Pitch(Pitch_angle);
                 ; 0000 006B          PcData=0;
                 ; 0000 006C         }
                 ; 0000 006D 
                 ; 0000 006E         if(PcData=='S'){
                 _0x15:
0000e9 e5e3      	LDI  R30,LOW(83)
0000ea 15e9      	CP   R30,R9
0000eb f449      	BRNE _0x18
                 ; 0000 006F          Laser=1;
0000ec 9ac0      	SBI  0x18,0
                 ; 0000 0070          delay_ms(500);
0000ed efa4      	LDI  R26,LOW(500)
0000ee e0b1      	LDI  R27,HIGH(500)
0000ef d05b      	RCALL _delay_ms
                 ; 0000 0071          Laser=0;
0000f0 98c0      	CBI  0x18,0
                 ; 0000 0072          delay_ms(200);
0000f1 eca8      	LDI  R26,LOW(200)
0000f2 e0b0      	LDI  R27,0
0000f3 d057      	RCALL _delay_ms
                 ; 0000 0073          PcData=0;
0000f4 2499      	CLR  R9
                 ; 0000 0074         }
                 ; 0000 0075 
                 ; 0000 0076     };
                 _0x18:
0000f5 cfd7      	RJMP _0x9
                 ; 0000 0077 }
                 _0x1D:
0000f6 cfff      	RJMP _0x1D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
0000f7 93ba      	ST   -Y,R27
0000f8 93aa      	ST   -Y,R26
0000f9 931a      	ST   -Y,R17
0000fa 930a      	ST   -Y,R16
0000fb 81ea      	LDD  R30,Y+2
0000fc 81fb      	LDD  R31,Y+2+1
0000fd 55ea      	SUBI R30,LOW(90)
0000fe 40f0      	SBCI R31,HIGH(90)
0000ff 83ea      	STD  Y+2,R30
000100 83fb      	STD  Y+2+1,R31
000101 81aa      	LDD  R26,Y+2
000102 81bb      	LDD  R27,Y+2+1
000103 3aab      	CPI  R26,LOW(0xFFAB)
000104 efef      	LDI  R30,HIGH(0xFFAB)
000105 07be      	CPC  R27,R30
000106 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000107 eae8      	LDI  R30,LOW(65448)
000108 efff      	LDI  R31,HIGH(65448)
000109 83ea      	STD  Y+2,R30
00010a 83fb      	STD  Y+2+1,R31
00010b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00010c 81aa      	LDD  R26,Y+2
00010d 81bb      	LDD  R27,Y+2+1
00010e 35a6      	CPI  R26,LOW(0x56)
00010f e0e0      	LDI  R30,HIGH(0x56)
000110 07be      	CPC  R27,R30
000111 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000112 e5e8      	LDI  R30,LOW(88)
000113 e0f0      	LDI  R31,HIGH(88)
000114 83ea      	STD  Y+2,R30
000115 83fb      	STD  Y+2+1,R31
000116 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000117 81aa      	LDD  R26,Y+2
000118 81bb      	LDD  R27,Y+2+1
000119 5aa6      	SUBI R26,LOW(-90)
00011a 4fbf      	SBCI R27,HIGH(-90)
00011b e1e4      	LDI  R30,LOW(20)
00011c e0f0      	LDI  R31,HIGH(20)
00011d d01a      	RCALL __MULW12
00011e 52e4      	SUBI R30,LOW(-1500)
00011f 4ffa      	SBCI R31,HIGH(-1500)
000120 018f      	MOVW R16,R30
000121 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000122 012f      	MOVW R4,R30
000123 01d2      	MOVW R26,R4
000124 df64      	RCALL _Servo_Yaw
000125 2499      	CLR  R9
000126 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000127 013f      	MOVW R6,R30
000128 01d3      	MOVW R26,R6
000129 df69      	RCALL _Servo_Pitch
00012a 2499      	CLR  R9
00012b 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
00012c 95f1      	NEG  R31
00012d 95e1      	NEG  R30
00012e 40f0      	SBCI R31,0
00012f 9508      	RET
                 
                 __MULW12U:
000130 9ffa      	MUL  R31,R26
000131 2df0      	MOV  R31,R0
000132 9feb      	MUL  R30,R27
000133 0df0      	ADD  R31,R0
000134 9fea      	MUL  R30,R26
000135 2de0      	MOV  R30,R0
000136 0df1      	ADD  R31,R1
000137 9508      	RET
                 
                 __MULW12:
000138 d004      	RCALL __CHKSIGNW
000139 dff6      	RCALL __MULW12U
00013a f40e      	BRTC __MULW121
00013b dff0      	RCALL __ANEGW1
                 __MULW121:
00013c 9508      	RET
                 
                 __CHKSIGNW:
00013d 94e8      	CLT
00013e fff7      	SBRS R31,7
00013f c002      	RJMP __CHKSW1
000140 dfeb      	RCALL __ANEGW1
000141 9468      	SET
                 __CHKSW1:
000142 ffb7      	SBRS R27,7
000143 c006      	RJMP __CHKSW2
000144 95b1      	NEG  R27
000145 95a1      	NEG  R26
000146 40b0      	SBCI R27,0
000147 f800      	BLD  R0,0
000148 9403      	INC  R0
000149 fa00      	BST  R0,0
                 __CHKSW2:
00014a 9508      	RET
                 
                 _delay_ms:
00014b 9610      	adiw r26,0
00014c f039      	breq __delay_ms1
                 __delay_ms0:
00014d 95a8      	wdr
                +
00014e ea80     +LDI R24 , LOW ( 0xFA0 )
00014f e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000150 9701     +SBIW R24 , 1
000151 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000152 9711      	sbiw r26,1
000153 f7c9      	brne __delay_ms0
                 __delay_ms1:
000154 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  10 r1 :   2 r2 :   0 r3 :   0 r4 :   5 r5 :   0 r6 :   5 r7 :   0 
r8 :   0 r9 :   9 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  10 r25:   3 r26:  22 r27:  17 r28:   2 r29:   1 r30:  78 r31:  26 
x  :   3 y  :  20 z  :   7 
Registers used: 19 out of 35 (54.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   2 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   2 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :   2 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   1 jmp   :  36 ld    :   0 ldd   :  10 
ldi   :  49 lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   2 
movw  :  14 mul   :   3 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   0 ori   :   0 out   :  26 pop   :   0 push  :   0 rcall :  27 
ret   :  14 reti  :   1 rjmp  :   6 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   5 sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 
sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   7 std   :   6 sts   :   3 sub   :   0 subi  :   3 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 43 out of 117 (36.8%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002aa    650     32    682  131072   0.5%
[.dseg] 0x000100 0x000500      0      0      0    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
